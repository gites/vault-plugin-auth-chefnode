package chefnode

import (
	"bytes"
	"context"
	"crypto"
	"crypto/rsa"
	"crypto/sha1"
	"crypto/x509"
	"encoding/base64"
	"encoding/pem"
	"fmt"
	"math"
	"net/http"
	"sort"
	"strings"

	"net/url"

	"time"

	"io/ioutil"

	"encoding/json"

	"io"

	"github.com/hashicorp/vault/helper/policyutil"
	"github.com/hashicorp/vault/helper/strutil"
	"github.com/hashicorp/vault/logical"
	"github.com/hashicorp/vault/logical/framework"
)

func pathLogin(b *backend) *framework.Path {
	return &framework.Path{
		Pattern: "login",
		Fields: map[string]*framework.FieldSchema{
			"signature_version": &framework.FieldSchema{
				Type: framework.TypeString,
				Description: `Version of the Chef signature algorithm to use. Corresponds
to the value that mixlib-authentication will set for the X-Ops-Sign HTTP header.
Currently only version 1.0 of the signature algorithm is supported so this should
be set to 'algorithm=sha1;version=1.0;'`,
			},
			"client_name": &framework.FieldSchema{
				Type: framework.TypeString,
				Description: `The name of the client to authenticate. Corresponds
to the value of the X-Ops-UserId header set by mixlib-authentication`,
			},
			"timestamp": &framework.FieldSchema{
				Type: framework.TypeString,
				Description: `Timestamp of signature in time.RFC3339 format. Corresponds
to X-Ops-Timestamp header returned by mixlib-authentcation. This backend currently checks
that the timestamp is within 5 minutes of vaults current time.`,
			},
			"signature": &framework.FieldSchema{
				Type: framework.TypeString,
				Description: `Signature of authentication request. Corresponds to the
X-Ops-Authorization-* headers returned by mixlib-authentication. The value should be given
as one value rather than the split value generated by mixlib-authentication.`,
			},
		},
		Callbacks: map[logical.Operation]framework.OperationFunc{
			logical.UpdateOperation: b.pathLogin,
		},
		HelpSynopsis:    pathLoginSyn,
		HelpDescription: pathLoginDesc,
	}
}

func (b *backend) pathLogin(ctx context.Context, req *logical.Request, data *framework.FieldData) (*logical.Response, error) {
	client := data.Get("client_name").(string)
	ts := data.Get("timestamp").(string)
	sig := data.Get("signature").(string)
	sigVer := data.Get("signature_version").(string)

	keys, err := b.retrievePubKey(ctx, req, client)
	if err != nil {
		return nil, err
	}
	reqPath := "/v1/" + req.MountPoint + req.Path
	auth := authenticate(client, ts, sig, sigVer, keys, reqPath)
	if !auth {
		return logical.ErrorResponse("Couldn't authenticate client"), nil
	}

	allowedSkew := time.Minute * 5
	now := time.Now().UTC()
	headerTime, err := time.Parse(time.RFC3339, data.Get("timestamp").(string))
	if err != nil {
		return nil, err
	}

	if math.Abs(float64(now.Sub(headerTime))) > float64(allowedSkew) {
		return nil, fmt.Errorf("clock skew is too great for request")
	}

	policies, err := b.getNodePolicies(ctx, req, client)
	if err != nil {
		return nil, err
	}

	return &logical.Response{
		Auth: &logical.Auth{
			Policies:    policies,
			DisplayName: client,
			LeaseOptions: logical.LeaseOptions{
				Renewable: true,
			},
			InternalData: map[string]interface{}{
				"request_path":      reqPath,
				"signature_version": data.Get("signature_version"),
				"signature":         data.Get("signature"),
				"client_name":       data.Get("client_name"),
				"timestamp":         data.Get("timestamp"),
			},
		},
	}, nil
}

func (b *backend) pathLoginRenew(ctx context.Context, req *logical.Request, d *framework.FieldData) (*logical.Response, error) {
	if req.Auth == nil {
		return nil, fmt.Errorf("request auth was nil")
	}

	reqPath := req.Auth.InternalData["request_path"].(string)
	sig := req.Auth.InternalData["signature"].(string)
	sigVer := req.Auth.InternalData["signature_version"].(string)
	client := req.Auth.InternalData["client_name"].(string)
	ts := req.Auth.InternalData["timestamp"].(string)

	keys, err := b.retrievePubKey(ctx, req, client)
	if err != nil {
		return nil, err
	}

	auth := authenticate(client, ts, sig, sigVer, keys, reqPath)
	if !auth {
		return nil, fmt.Errorf("couldn't authenticate renew request")
	}

	policies, err := b.getNodePolicies(ctx, req, client)
	if err != nil {
		return nil, fmt.Errorf("coulnd't retrieve current policy list")
	}

	if !policyutil.EquivalentPolicies(policies, req.Auth.Policies) {
		return nil, fmt.Errorf("policies have changed, not renewing")
	}

	return framework.LeaseExtend(0, 0, b.System())(ctx, req, d)
}

func constructAuthorization(h http.Header) string {
	authHeaders := make(map[string]string)
	var keys []string
	var ret bytes.Buffer

	for k, v := range h {
		if strings.HasPrefix(k, "X-Ops-Authorization-") {
			authHeaders[k] = v[0]
			keys = append(keys, k)
		}
	}
	sort.Strings(keys)
	for _, v := range keys {
		ret.WriteString(authHeaders[v])
	}
	return ret.String()
}

func (b *backend) getNodePolicies(ctx context.Context, req *logical.Request, node string) ([]string, error) {
	var clientPols []string
	clientEntry, err := b.Client(ctx, req.Storage, node)
	if err != nil {
		return nil, err
	}
	if clientEntry != nil {
		clientPols = clientEntry.Policies
	}
	config, err := b.Config(ctx, req.Storage)
	if err != nil {
		return nil, err
	}
	defaultPols := config.DefaultPolicies
	var allPol []string
	allPol = append(allPol, clientPols...)
	allPol = append(allPol, defaultPols...)
	allPol = strutil.RemoveDuplicates(allPol, false)

	return allPol, nil
}

func (b *backend) retrievePubKey(ctx context.Context, req *logical.Request, targetName string) ([]*rsa.PublicKey, error) {
	var keys []*rsa.PublicKey
	config, err := b.Config(ctx, req.Storage)
	if err != nil {
		return nil, err
	}

	keysURL, err := url.Parse(config.BaseURL + "/clients/" + targetName + "/keys")
	if err != nil {
		return nil, err
	}

	headers, err := authHeaders(config, keysURL, "GET", nil, true)
	if err != nil {
		return nil, err
	}

	clientReq, err := http.NewRequest("GET", keysURL.String(), nil)
	if err != nil {
		return nil, err
	}

	clientReq.Header = headers
	client := &http.Client{}
	resp, err := client.Do(clientReq)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	var kr []keyInfo
	if err := json.Unmarshal(body, &kr); err != nil {
		return nil, fmt.Errorf("Couldn't unmarshal '%s' into keyInfo", body)
	}
	for i := range kr {
		if kr[i].Expired {
			continue
		}
		keyURL, err := url.Parse(kr[i].URI)
		if err != nil {
			return nil, err
		}

		keyHeaders, err := authHeaders(config, keyURL, "GET", nil, true)
		if err != nil {
			return nil, err
		}

		keyReq, err := http.NewRequest("GET", keyURL.String(), nil)
		if err != nil {
			return nil, err
		}

		keyReq.Header = keyHeaders
		keyClient := &http.Client{}
		keyResp, err := keyClient.Do(keyReq)
		if err != nil {
			return nil, err
		}
		defer keyResp.Body.Close()
		keyBody, err := ioutil.ReadAll(keyResp.Body)
		if err != nil {
			return nil, err
		}

		var ck struct {
			ClientKey string `json:"public_key"`
		}
		err = json.Unmarshal(keyBody, &ck)
		if err != nil {
			return nil, err
		}

		cKey, err := parsePublicKey(ck.ClientKey)
		keys = append(keys, cKey)
	}

	return keys, nil
}

func authenticate(client string, ts string, sig string, sigVer string, keys []*rsa.PublicKey, path string) bool {
	bodyHash := sha1.Sum([]byte(""))
	hashedPath := sha1.Sum([]byte(path))
	headers := []string{
		"Method:POST",
		"Hashed Path:" + base64.StdEncoding.EncodeToString(hashedPath[:]),
		"X-Ops-Content-Hash:" + base64.StdEncoding.EncodeToString(bodyHash[:]),
		"X-Ops-Timestamp:" + ts,
		"X-Ops-UserId:" + client,
	}
	headerString := strings.Join(headers, "\n")
	decSig, err := base64.StdEncoding.DecodeString(sig)
	if err != nil {
		return false
	}
	for i := range keys {
		err = rsa.VerifyPKCS1v15(keys[i], crypto.Hash(0), []byte(headerString), decSig)
		if err == nil {
			return true
		}
	}
	return false
}

func authHeaders(conf *config, url *url.URL, method string, body io.Reader, split bool) (http.Header, error) {
	hashedPath := sha1.Sum([]byte(url.EscapedPath()))
	var bodyHash [20]byte

	if body != nil {
		bodyData, err := ioutil.ReadAll(body)
		if err != nil {
			return nil, err
		}
		bodyHash = sha1.Sum(bodyData)
	} else {
		bodyHash = sha1.Sum([]byte(""))
	}

	ts := time.Now().UTC().Format(time.RFC3339)
	headers := []string{
		"Method:" + method,
		"Hashed Path:" + base64.StdEncoding.EncodeToString(hashedPath[:]),
		"X-Ops-Content-Hash:" + base64.StdEncoding.EncodeToString(bodyHash[:]),
		"X-Ops-Timestamp:" + ts,
		"X-Ops-UserId:" + conf.ClientName,
	}

	headerString := strings.Join(headers, "\n")
	key, err := parsePrivateKey(conf.ClientKey)
	if err != nil {
		return nil, err
	}

	sig, err := rsa.SignPKCS1v15(nil, key, crypto.Hash(0), []byte(headerString))
	if err != nil {
		return nil, err
	}
	ret := make(http.Header)
	if split {
		splitSig := splitOn60(base64.StdEncoding.EncodeToString(sig))
		for i := range splitSig {
			ret.Set(fmt.Sprintf("X-Ops-Authorization-%d", i+1), splitSig[i])
		}
	} else {
		ret.Set("X-Ops-Authorization", base64.StdEncoding.EncodeToString(sig))
	}
	ret.Set("X-Ops-Sign", "algorithm=sha1;version=1.0;")
	ret.Set("Method", method)
	ret.Set("X-Ops-Timestamp", ts)
	ret.Set("X-Ops-Content-Hash", base64.StdEncoding.EncodeToString(bodyHash[:]))
	ret.Set("X-Ops-Userid", conf.ClientName)
	ret.Set("Accept", "application/json")
	ret.Set("X-Chef-Version", "12.0.0")
	ret.Set("host", url.Host)

	return ret, nil
}

func splitOn60(toSplit string) []string {
	size := int(math.Ceil(float64(len(toSplit)) / 60.0))
	sl := make([]string, size)
	for i := 0; i < size-1; i++ {
		sl[i] = toSplit[(i * 60) : (i*60)+60]
	}
	sl[size-1] = toSplit[(size-1)*60:]
	return sl
}

func parsePublicKey(key string) (*rsa.PublicKey, error) {
	block, _ := pem.Decode([]byte(key))
	if block == nil {
		return nil, fmt.Errorf("Couldn't parse PEM data")
	}
	pubkey, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		return nil, err
	}
	return pubkey.(*rsa.PublicKey), nil
}

type keyInfo struct {
	URI     string `json:"uri"`
	Expired bool   `json:"expired"`
}

type keyResponse struct {
	ClientKey string `json:"public_key"`
}

const pathLoginSyn = `
Authenticate a Chef node to Vault.
`

const pathLoginDesc = `
A Chef node is authenticated against a Chef server using a signature generated using
its Chef client key.
`
